// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ca.proto

package tao

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CAType int32

const (
	CAType_ERROR          CAType = 0
	CAType_ATTESTATION    CAType = 1
	CAType_DATALOG_POLICY CAType = 2
	CAType_ACL_POLICY     CAType = 3
	CAType_UNDEFINED      CAType = 4
)

var CAType_name = map[int32]string{
	0: "ERROR",
	1: "ATTESTATION",
	2: "DATALOG_POLICY",
	3: "ACL_POLICY",
	4: "UNDEFINED",
}
var CAType_value = map[string]int32{
	"ERROR":          0,
	"ATTESTATION":    1,
	"DATALOG_POLICY": 2,
	"ACL_POLICY":     3,
	"UNDEFINED":      4,
}

func (x CAType) Enum() *CAType {
	p := new(CAType)
	*p = x
	return p
}
func (x CAType) String() string {
	return proto.EnumName(CAType_name, int32(x))
}
func (x *CAType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CAType_value, data, "CAType")
	if err != nil {
		return err
	}
	*x = CAType(value)
	return nil
}
func (CAType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type CARequest struct {
	Type             *CAType      `protobuf:"varint,1,req,name=type,enum=tao.CAType" json:"type,omitempty"`
	Attestation      *Attestation `protobuf:"bytes,2,opt,name=attestation" json:"attestation,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CARequest) Reset()                    { *m = CARequest{} }
func (m *CARequest) String() string            { return proto.CompactTextString(m) }
func (*CARequest) ProtoMessage()               {}
func (*CARequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CARequest) GetType() CAType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CAType_ERROR
}

func (m *CARequest) GetAttestation() *Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type CAResponse struct {
	Type               *CAType             `protobuf:"varint,1,req,name=type,enum=tao.CAType" json:"type,omitempty"`
	Attestation        *Attestation        `protobuf:"bytes,2,opt,name=attestation" json:"attestation,omitempty"`
	SignedDatalogRules *SignedDatalogRules `protobuf:"bytes,3,opt,name=signed_datalog_rules" json:"signed_datalog_rules,omitempty"`
	SignedAclSet       *SignedACLSet       `protobuf:"bytes,4,opt,name=signed_acl_set" json:"signed_acl_set,omitempty"`
	XXX_unrecognized   []byte              `json:"-"`
}

func (m *CAResponse) Reset()                    { *m = CAResponse{} }
func (m *CAResponse) String() string            { return proto.CompactTextString(m) }
func (*CAResponse) ProtoMessage()               {}
func (*CAResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CAResponse) GetType() CAType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CAType_ERROR
}

func (m *CAResponse) GetAttestation() *Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

func (m *CAResponse) GetSignedDatalogRules() *SignedDatalogRules {
	if m != nil {
		return m.SignedDatalogRules
	}
	return nil
}

func (m *CAResponse) GetSignedAclSet() *SignedACLSet {
	if m != nil {
		return m.SignedAclSet
	}
	return nil
}

func init() {
	proto.RegisterType((*CARequest)(nil), "tao.CARequest")
	proto.RegisterType((*CAResponse)(nil), "tao.CAResponse")
	proto.RegisterEnum("tao.CAType", CAType_name, CAType_value)
}

func init() { proto.RegisterFile("ca.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x8f, 0x41, 0x6b, 0xb3, 0x40,
	0x10, 0x86, 0x3f, 0x13, 0xbf, 0x52, 0x47, 0x6a, 0xcc, 0xb6, 0x50, 0x9b, 0x53, 0x08, 0x14, 0xd2,
	0x1e, 0x3c, 0x04, 0xfa, 0x03, 0x16, 0xb5, 0x45, 0xb0, 0x5a, 0x74, 0x4b, 0xe9, 0x49, 0x96, 0xb8,
	0x48, 0x40, 0x5c, 0xeb, 0x8e, 0x87, 0xfc, 0xab, 0xfe, 0xc4, 0xa2, 0x31, 0xd4, 0x7b, 0x8f, 0xfb,
	0xcc, 0xf3, 0xce, 0xce, 0x0b, 0x97, 0x7b, 0xee, 0x36, 0xad, 0x44, 0x49, 0xe6, 0xc8, 0xe5, 0x6a,
	0xc9, 0x11, 0x85, 0x42, 0x8e, 0x07, 0x59, 0x9f, 0xf8, 0xea, 0xba, 0xe0, 0xc8, 0x2b, 0x59, 0xe6,
	0x65, 0xc7, 0xdb, 0x62, 0x84, 0x0b, 0xbe, 0xaf, 0xa6, 0x60, 0xf3, 0x0a, 0x86, 0x47, 0x53, 0xf1,
	0xd5, 0x09, 0x85, 0xe4, 0x0e, 0x74, 0x3c, 0x36, 0xc2, 0xd1, 0xd6, 0xb3, 0xad, 0xb5, 0x33, 0x5d,
	0xe4, 0xd2, 0xf5, 0x28, 0x3b, 0x36, 0x82, 0xdc, 0x83, 0x39, 0xf9, 0xc2, 0x99, 0xad, 0xb5, 0xad,
	0xb9, 0xb3, 0x07, 0x83, 0xfe, 0xf2, 0xcd, 0xb7, 0x06, 0xd0, 0xef, 0x53, 0x8d, 0xac, 0x95, 0xf8,
	0xfb, 0x42, 0xf2, 0x04, 0x37, 0xea, 0x50, 0xd6, 0xa2, 0xc8, 0xcf, 0x75, 0xda, 0xae, 0x12, 0xca,
	0x99, 0x0f, 0xfe, 0xed, 0xe0, 0x67, 0x83, 0xe0, 0x9f, 0xe6, 0x69, 0x3f, 0x26, 0x0f, 0x60, 0x8d,
	0xb1, 0xbe, 0xb0, 0x12, 0xe8, 0xe8, 0x43, 0x60, 0x39, 0x09, 0x50, 0x2f, 0xca, 0x04, 0x3e, 0x7e,
	0xc0, 0xc5, 0x78, 0x92, 0x01, 0xff, 0x83, 0x34, 0x4d, 0x52, 0xfb, 0x1f, 0x59, 0x80, 0x49, 0x19,
	0x0b, 0x32, 0x46, 0x59, 0x98, 0xc4, 0xb6, 0x46, 0x08, 0x58, 0x3e, 0x65, 0x34, 0x4a, 0x5e, 0xf2,
	0xb7, 0x24, 0x0a, 0xbd, 0x4f, 0x7b, 0x46, 0x2c, 0x00, 0xea, 0x45, 0xe7, 0xf7, 0x9c, 0x5c, 0x81,
	0xf1, 0x1e, 0xfb, 0xc1, 0x73, 0x18, 0x07, 0xbe, 0xad, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf7,
	0xbb, 0x55, 0x2a, 0xa3, 0x01, 0x00, 0x00,
}
